name: deploy

on:
  workflow_dispatch:
  push:
    branches: ["dev"]

permissions:
  contents: read

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ap-northeast-2
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      ECR_REPOSITORY: promesa-repo

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Gradle Build Run (skip tests)
        run: ./gradlew build -x test

      - name: Show build/libs contents
        run: ls -al build/libs

      - name: Build Docker image
        run: |
          IMAGE_TAG=${{ github.sha }}
          docker build -t promesa:${IMAGE_TAG} .
          docker tag promesa:${IMAGE_TAG} promesa:latest

      - name: ECR Login
        uses: aws-actions/amazon-ecr-login@v1
        with:
          region: ${{ env.AWS_REGION }}

      - name: Tag and Push to ECR
        run: |
          IMAGE_TAG=${{ github.sha }}
          ECR_REGISTRY=${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com
          docker tag promesa:${IMAGE_TAG} ${ECR_REGISTRY}/${{ env.ECR_REPOSITORY }}:${IMAGE_TAG}
          docker push ${ECR_REGISTRY}/${{ env.ECR_REPOSITORY }}:${IMAGE_TAG}
          docker tag promesa:latest ${ECR_REGISTRY}/${{ env.ECR_REPOSITORY }}:latest
          docker push ${ECR_REGISTRY}/${{ env.ECR_REPOSITORY }}:latest

      - name: Zip for CodeDeploy
        run: |
          cp build/libs/*.jar scripts/
          zip -r latest.zip \
            appspec.yml \
            scripts/

      - name: Check contents of latest.zip
        run: unzip -l latest.zip

      - name: Upload to S3
        run: aws s3 cp latest.zip s3://ceos-promesa/latest.zip

      - name: Request to CodeDeploy
        run: |
          aws deploy create-deployment \
            --application-name test-application \
            --deployment-config-name CodeDeployDefault.AllAtOnce \
            --deployment-group-name Promesa-BlueGreen-DeploymentGroup \
            --s3-location bucket=ceos-promesa,bundleType=zip,key=latest.zip
